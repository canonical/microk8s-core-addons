#!/usr/bin/env python3

import os
import pathlib
import subprocess

import click

DIR = pathlib.Path(__file__).parent.absolute()
PLUGINS_DIR = pathlib.Path(os.path.expandvars("$SNAP_COMMON/plugins"))
ARGS_DIR = pathlib.Path(os.path.expandvars("$SNAP_DATA/args"))
CREDS_DIR = pathlib.Path(os.path.expandvars("$SNAP_DATA/credentials"))
CERTS_DIR = pathlib.Path(os.path.expandvars("$SNAP_DATA/certs"))



def removeArgument(arg: str, service: str):
    """
    Remove argument from a service.

        Parameters:
            arg (str): arguments
            service (str): name of the service to add the argument to

        Returns:
            restart (bool): should the service be restarted
    """
    exists = False
    restart = False
    lines = []
    with open(ARGS_DIR / service, "r") as file:
        for line_number, line in enumerate(file, start=1):  
            if arg in line:
                exists = True
                continue
            lines.append(line)

    if exists:
        with open(ARGS_DIR / service, "w+") as file_object:
            file_object.writelines(lines)
            restart = True
    return restart


def RemoveServiceArguments():
    """Remove arguments from all services."""
    click.echo("Setting API server arguments")
    args = ["--kubelet-certificate-authority",
            "--enable-admission-plugins",
            "--admission-control-config-file", "${SNAP_DATA}/args/admission-control-config-file.yaml",
            "--audit-log-path", "/var/log/apiserver/audit.log",
            "--audit-log-maxage", "30",
            "--audit-log-maxbackup", "10",
            "--audit-log-maxsize", "100",
            "--audit-policy-file", "${SNAP_DATA}/args/audit-policy.yaml",
            "--request-timeout", "300s",
            "--tls-cipher-suites", "TLS_AES_128_GCM_SHA256,TLS_AES_256_GCM_SHA384,TLS_CHACHA20_POLY1305_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256,TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256,TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_128_GCM_SHA256,TLS_RSA_WITH_AES_256_CBC_SHA,TLS_RSA_WITH_AES_256_GCM_SHA384",
        ]
    
    restart = False
    for arg in args:
        res = removeArgument(arg, "kube-apiserver")
        restart = restart or res

    click.echo("Setting controller manager arguments")
    args = ["--terminated-pod-gc-threshold"]
    
    for arg in args:
        res = removeArgument(arg, "kube-controller-manager")
        restart = restart or res

    click.echo("Setting kubelet arguments")
    args = ["--protect-kernel-defaults",
            "--event-qps",
            "--tls-cipher-suites",
            "--authorization-mode",
            "--tls-cert-file",
            "--tls-private-key-file",
        ]
    
    for arg in args:
        res = removeArgument(arg, "kubelet")
        restart = restart or res

    if restart:
        try:
            subprocess.call("systemctl restart snap.microk8s.daemon-kubelite".split())
        except subprocess.CalledProcessError as e:
            click.echo(f"Failed to restart kubelite: {e}", err=True)
            exit(4)



def NeedsRoot():
    """Require we run the script as root (sudo)."""
    if os.geteuid() != 0:
        click.echo("Elevated permissions are needed for this addon.", err=True)
        click.echo("Please try again, this time using 'sudo'.", err=True)
        exit(1)


def MarkAddonDisabled():
    """Mark the addon as enabled by creating a lock file."""
    lockfile = pathlib.Path(os.path.expandvars("$SNAP_DATA/var/lock/cis-hardening"))
    os.remove(lockfile)


def UninstallKubebench():
    """Remove kubebench"""
    click.echo("Removing kube-bench")
    try:
        bin = PLUGINS_DIR / "kube-bench"
        if os.path.exists(bin):
            os.remove(bin)
    except subprocess.CalledProcessError as e:
         click.echo(f"Failed to remove kube-bench: {e}", err=True)


@click.command()
def main():
    NeedsRoot()
    RemoveServiceArguments()
    UninstallKubebench()
    MarkAddonDisabled()


if __name__ == '__main__':
    main()
