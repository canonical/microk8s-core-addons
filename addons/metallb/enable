#!/usr/bin/env bash

set -e

source $SNAP/actions/common/utils.sh
CURRENT_DIR=$(cd $(dirname "${BASH_SOURCE[0]}") && pwd)

KUBECTL="$SNAP/microk8s-kubectl.wrapper"

echo "Enabling MetalLB"

read -ra METALLB_ARGUMENTS <<< "$2"
if [ -z "${METALLB_ARGUMENTS[@]}" ]
then
  echo "Do you want to install MetalLB in frr-mode (required for IPv6 BGP peering)?"
  echo "You can also pass 'frr' as an argument to enable frr when enabling this addon: "
  echo " microk8s enable metallb:192.168.1.240/24:frr"
  read -p "(Yes/No): " answer
  answer=$(echo "$answer" | tr '[:upper:]' '[:lower:]')
  if [ "$answer" = "yes" ]; then
    FRR_MODE=true
  else
    FRR_MODE=false
  fi
else
  argument="${METALLB_ARGUMENTS[@]}"
  if [ "$argument" = "frr" ]; then
    FRR_MODE=true
  else
    FRR_MODE=false
  fi
fi
echo "FRR-mode enabled: $FRR_MODE"


# Due to a bug in metallb, sometimes, the cert configuration
# for the validation endpoints is broken after deployment.
# As this happens seemingly at random, the option to disable
# them is provided. This is only a temporary fix, until the
# real issue is fixed upstream. See Issue #1597 at github.com/metallb
# for more information about this

read -ra DISABLE_WEBHOOK_SAFETY_ARGUMENTS <<< "$3"
if [ -z "${DISABLE_WEBHOOK_SAFETY_ARGUMENTS[@]}" ]
then
  echo "Setting Webhook Policy to 'Fail'"
  WEBHOOK_FAILURE_POLICY="Fail"
else
  argument="${DISABLE_WEBHOOK_SAFETY_ARGUMENTS[@]}"
  if [ "$argument" = "ignore" ]; then
    WEBHOOK_FAILURE_POLICY="Ignore"
    echo "The Webhook failure policy has been set to 'ignore'!"
    echo "This can be dangerous, as it enables the kube-api to"
    echo "potentially deploy invalid manifests, proceed with caution!"
  else
    WEBHOOK_FAILURE_POLICY="Fail"
  fi
  echo "Webhook Failure Policy: $WEBHOOK_FAILURE_POLICY"
fi


ALLOWESCALATION=false
if grep  -e ubuntu /proc/version | grep 16.04 &> /dev/null
then
  ALLOWESCALATION=true
fi

read -ra ARGUMENTS <<< "$1"
if [ -z "${ARGUMENTS[@]}" ]
then
  read -p "Enter each IP address range delimited by comma (e.g. '10.64.140.43-10.64.140.49,192.168.0.105-192.168.0.111'): " ip_range_input
  if [ -z "${ip_range_input}" ]
  then
    echo "You have to input an IP Range value when asked, or provide it as an argument to the enable command, eg:"
    echo "  microk8s enable metallb:10.64.140.43-10.64.140.49,192.168.0.105-192.168.0.111"
    echo "You can also use CIDR notation, eg."
    echo "  microk8s enable metallb:192.168.1.240/24"
    exit 1
  fi
else
  ip_range_input="${ARGUMENTS[@]}"
fi
REGEX_IP_RANGE='^[0-9][0-9]*\.[0-9][0-9]*\.[0-9][0-9]*\.[0-9][0-9]*-[0-9][0-9]*\.[0-9][0-9]*\.[0-9][0-9]*\.[0-9][0-9]*$'
REGEX_IP_CIDR='^[0-9][0-9]*\.[0-9][0-9]*\.[0-9][0-9]*\.[0-9]{1,3}\/[0-9]{1,3}$'
ip_ranges=(`echo $ip_range_input | sed 's/,/\n/g'`)
ip_range_str="addresses:"
for ip_range in "${ip_ranges[@]}"
do
  if [[ $ip_range =~ $REGEX_IP_RANGE ||  $ip_range =~ $REGEX_IP_CIDR ]]
  then
    ip_range_str="${ip_range_str}\n      - ${ip_range}"
  else
    echo "Your input value ($ip_range) is not a valid IP Range"
    exit 1
  fi
done
echo "Applying Metallb manifest"
$KUBECTL apply -f $CURRENT_DIR/crd.yaml

if [ "$FRR_MODE" = true ] ; then
  cat $CURRENT_DIR/metallb-frr.yaml | $SNAP/bin/sed "s@{{allow_escalation}}@$ALLOWESCALATION@g" | $SNAP/bin/sed "s@failurePolicy: Fail@failurePolicy: \"$WEBHOOK_FAILURE_POLICY\"@g" | $KUBECTL apply -f -
else
  cat $CURRENT_DIR/metallb.yaml | $SNAP/bin/sed "s@{{allow_escalation}}@$ALLOWESCALATION@g" | $SNAP/bin/sed "s@failurePolicy: Fail@failurePolicy: \"$WEBHOOK_FAILURE_POLICY\"@g" | $KUBECTL apply -f -
fi


echo "Waiting for Metallb controller to be ready."
while ! $KUBECTL -n metallb-system  wait deployment controller --for condition=Available=True --timeout=30s ; do
  echo "MetalLB controller is still not ready"
  sleep 1
done

while ! cat $CURRENT_DIR/addresspool.yaml | $SNAP/bin/sed "s@{{addresses}}@$ip_range_str@g" | $KUBECTL apply -f - ; do
  echo "Failed to create default address pool, will retry"
  sleep 1
done

echo "MetalLB is enabled"
