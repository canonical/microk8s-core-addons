#!/usr/bin/env python3

import os
import pathlib
import stat
import re
import shutil
import socket
import subprocess
import sys
import platform
import requests

import click

DIR = pathlib.Path(__file__).parent.absolute()
PLUGINS_DIR = pathlib.Path(os.path.expandvars("$SNAP_COMMON/plugins"))
ARGS_DIR = pathlib.Path(os.path.expandvars("$SNAP_DATA/args"))
CONFS_DIR = pathlib.Path(os.path.expandvars("$SNAP_DATA/credentials"))
CERTS_DIR = pathlib.Path(os.path.expandvars("$SNAP_COMMON/certs"))


def FixFilePermissions():
    print("Setting file permissions")
    try:
        for p in [ ARGS_DIR, CONFS_DIR, CERTS_DIR ]:
            subprocess.call(f"chmod -R 600 {p}".split)
            subprocess.call(f"chown -R root:root {p}".split)
    except subprocess.CalledProcessError as e:
        print(f"Failed to set file permissions: {e}")
        exit(3)


def NeedsRoot():
    if os.geteuid() != 0:
        print("Elevated permissions are needed for this addon.")
        print("Please try again, this time using 'sudo'.")
        exit(1)


def DownloadKubebench():
    print("Downloading kube-bench")
    try:
        tmpdir = DIR / "tmp"
        shutil.rmtree(tmpdir, ignore_errors=True)
        if not os.path.exists(tmpdir):
            os.makedirs(tmpdir)
        arch = get_arch()
        url = f"https://github.com/aquasecurity/kube-bench/releases/download/v{kubebench_version}/kube-bench_{kubebench_version}_linux_{arch}.tar.gz"
        response = requests.get(url)
        tarball = tmpdir / "kube-bench.tar.gz"
        open(tarball, "wb").write(response.content)
        subprocess.check_call(f"tar -zxf {tarball} -C {tmpdir}".split())
        src = DIR / "kube-bench"
        dst = PLUGINS_DIR / "kube-bench"
        shutil.copyfile(src, dst)
        subprocess.check_call(f"chmod +x {dst}".split())
    except subprocess.CalledProcessError as e:
        print(f"Failed to download kube-bench: {e}")
        exit(2)


def get_arch():
    """
    Returns the architecture we are running on
    """
    arch_translate = {"aarch64": "arm64", "x86_64": "amd64"}
    return arch_translate[platform.machine()]

@click.command()
@click.option("--kubebench-version", default="0.6.13")
def main(kubebench_version: str,):
    NeedsRoot()
    DownloadKubebench()
    FixFilePermissions()


if __name__ == '__main__':
    main()
