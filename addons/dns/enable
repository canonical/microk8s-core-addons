#!/usr/bin/env bash

set -e

source $SNAP/actions/common/utils.sh
CURRENT_DIR=$(cd $(dirname "${BASH_SOURCE[0]}") && pwd)
source $CURRENT_DIR/../common/utils.sh

KUBECTL="$SNAP/microk8s-kubectl.wrapper"

# Apply the dns yaml
# We do not need to see dns pods running at this point just give some slack
echo "Enabling DNS"

read -ra ARGUMENTS <<< "$1"
if [[ -z "${ARGUMENTS[@]}" ]] || [[ "${ARGUMENTS[@]}" == "/etc/resolv.conf" ]]; then
  resolv_conf="$(cat $SNAP_DATA/args/kubelet | grep -- "--resolv-conf" | tr "=" " " | gawk '{print $2}')"
  if [ ! -z "${resolv_conf}" ]; then
    # kubelet has a resolv.conf file configured, we will use that one
    echo "Using host configuration from ${resolv_conf}"
    nameserver_str="/etc/resolv.conf"
  else
    host_resolv_conf="$($SNAP/usr/bin/python3 $SNAP/scripts/find-resolv-conf.py 2> /dev/null || true)"
    if [ ! -z "${host_resolv_conf}" ]; then
      # found a host resolv.conf file with non-loopback nameservers, use that one
      echo "Using host configuration from ${host_resolv_conf}"
      refresh_opt_in_config "resolv-conf" "${host_resolv_conf}" "kubelet"
      nameserver_str="/etc/resolv.conf"
    else
      # no resolv.conf file found, fallback to Google DNS servers
      echo "No valid resolv.conf file could be found"
      echo "Falling back to 8.8.8.8 8.8.4.4 as upstream nameservers"

      nameserver_str="8.8.8.8 8.8.4.4"
    fi
  fi
else
  # validate IP addresses
  nameserver_str=""
  for ns in ${ARGUMENTS[@]//,/ }; do
    if ! "${SNAP}/bin/ip" route get "$ns" > /dev/null 2> /dev/null; then
      echo "Your input value ($ns) is not a valid and reachable IP address"
      exit 1
    fi
    nameserver_str="${nameserver_str} ${ns}"
  done
  echo "Will use ${nameserver_str} as upstream nameservers"
fi

DNSIP="$2"
if [ x"${DNSIP}" == "x" ]; then
  # (QOL): If not using a custom service CIDR, then use the well-known address 10.152.183.10
  if cat "${SNAP_DATA}/args/kube-apiserver" | grep -q -- '^--service-cluster-ip-range=10.152.183.0/24' 2>/dev/null; then
    DNSIP="10.152.183.10"
  fi
fi

CLUSTER_DOMAIN="$3"
if [ -z "$CLUSTER_DOMAIN" ]; then
  CLUSTER_DOMAIN="cluster.local"
fi

echo "Applying manifest"
ALLOWESCALATION="false"
if grep -e ubuntu /proc/version | grep 16.04 &> /dev/null; then
  ALLOWESCALATION="true"
fi

declare -A map
map[\$ALLOWESCALATION]="$ALLOWESCALATION"
map[\$NAMESERVERS]="$nameserver_str"
map[\$DNSIP]="$DNSIP"
map[\$CLUSTERDOMAIN]="$CLUSTER_DOMAIN"
use_addon_manifest dns/coredns apply "$(declare -p map)"
sleep 5

DNSIP="$($KUBECTL get svc -n kube-system kube-dns -o jsonpath='{.spec.clusterIP}')"
echo "CoreDNS service deployed with IP address $DNSIP"

needs_restart=false
if ! grep -q -- "--cluster-domain=$CLUSTER_DOMAIN" "${SNAP_DATA}/args/kubelet"; then
  needs_restart=true
elif ! grep -q -- "--cluster-dns=$DNSIP" "${SNAP_DATA}/args/kubelet"; then
  needs_restart=true
fi

refresh_opt_in_config "cluster-domain" "$CLUSTER_DOMAIN" kubelet
refresh_opt_in_config "cluster-dns" "$DNSIP" kubelet

if [ -e ${SNAP_DATA}/var/lock/clustered.lock ] || [ "$needs_restart" = "true" ]; then
  echo "Restarting kubelet"
  restart_service kubelet
fi

echo "DNS is enabled"
