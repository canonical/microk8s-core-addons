#!/usr/bin/env python3

import base64
import csv
import os
import pathlib
import platform
import shutil
import subprocess

import click
import requests

DIR = pathlib.Path(__file__).parent.absolute()
PLUGINS_DIR = pathlib.Path(os.path.expandvars("$SNAP_COMMON/plugins"))
ARGS_DIR = pathlib.Path(os.path.expandvars("$SNAP_DATA/args"))
CREDS_DIR = pathlib.Path(os.path.expandvars("$SNAP_DATA/credentials"))
CERTS_DIR = pathlib.Path(os.path.expandvars("$SNAP_DATA/certs"))
DQLITE_DIR = pathlib.Path(os.path.expandvars("$SNAP_DATA/var/kubernetes/backend"))



def isStrict():
    """Return true if we are on a strict snap"""
    snap_yaml = pathlib.Path(os.path.expandvars("$SNAP/meta/snap.yaml"))
    with open(snap_yaml, "r") as file:
        for line_number, line in enumerate(file, start=1):
            if "confinement" in line and "strict" in line:
                return True
    return False


def create_x509_kubeconfig(filename, user, path_to_cert, path_to_cert_key):
    """
    Create a kubeconfig file. The file in stored under credentials named after the user

    :param filename: the name of the config file
    :param user: the user to use al login
    :param path_to_cert: path to certificate file
    :param path_to_cert_key: path to certificate key file
    """
    snap_path = pathlib.Path(os.environ.get("SNAP"))
    config_template = snap_path / "client-x509.config.template"
    config = CREDS_DIR / filename
    if os.path.exists(config):
        shutil.copyfile(config, "{}.tokens.backup".format(config))
    
    with open(CERTS_DIR / "ca.crt", "r") as f:
        ca = f.read()
        ca_line = base64.b64encode(ca.encode("utf-8")).decode("utf-8")

    with open(path_to_cert, "r") as f:
        cert = f.read()
        cert_line = base64.b64encode(cert.encode("utf-8")).decode("utf-8")

    with open(path_to_cert_key, "r") as f:
        cert = f.read()
        key_line = base64.b64encode(cert.encode("utf-8")).decode("utf-8")

    with open(config_template, "r") as tfp:
        with open(config, "w+") as fp:
            config_txt = tfp.read()
            config_txt = config_txt.replace("CADATA", ca_line)
            config_txt = config_txt.replace("NAME", user)
            config_txt = config_txt.replace("PATHTOCERT", cert_line)
            config_txt = config_txt.replace("PATHTOKEYCERT", key_line)
            config_txt = config_txt.replace("client-certificate", "client-certificate-data",)
            config_txt = config_txt.replace("client-key", "client-key-data")
            fp.write(config_txt)


def create_certificate(name, group):
    snap_path = pathlib.Path(os.environ.get("SNAP"))
    cert = CERTS_DIR / f"{name}.crt"
    key = CERTS_DIR / f"{name}.key"
    csr = CERTS_DIR / f"{name}.csr"
    cacert = CERTS_DIR / "ca.crt"
    cakey = CERTS_DIR / "ca.key"
    
    try:
        cmd = f"{snap_path}/usr/bin/openssl genrsa -out {key} 2048"
        subprocess.check_call(cmd.split(), stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
        cmd = f"{snap_path}/usr/bin/openssl req -new -key {key} -out {csr} -subj /CN={name}"
        if group:
            cmd += f"/O={group}"
        subprocess.check_call(cmd.split(), stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
        cmd = f"{snap_path}/usr/bin/openssl x509 -req -in {csr} -CA {cacert} -CAkey {cakey} -CAcreateserial -out {cert} -days 3650"
        subprocess.check_call(cmd.split(), stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
        return (cert, key)
    except subprocess.CalledProcessError as e:
        click.echo(f"Failed to generate certificates: {e}", err=True)
        exit(6)


def FixTokens():
    """Configure node to not use token authentication"""
    tokens = False
    lines = []
    with open(ARGS_DIR / "kube-apiserver", "r") as file:
        for line_number, line in enumerate(file, start=1):
            if line.startswith("--token-auth-file"):
                tokens = True
                continue
            lines.append(line)
    if not tokens:
        return False
    
    click.echo("Removing tokens")
    entities = [
        {"username": "admin", "group":"system:masters", "filename": "client.config"},
        {"username": "system:kube-controller-manager", "group": None, "filename": "controller.config"},
        {"username": "system:kube-proxy", "group": None, "filename": "proxy.config"},
        {"username": "system:kube-scheduler", "group": None, "filename": "scheduler.config"},
    ]

    with open(CREDS_DIR / "known_tokens.csv") as tokens_file:
        tokens_reader = csv.reader(tokens_file, delimiter=',')
        for row in tokens_reader:
            if row[2].startswith("kubelet"):
                entities.append(
                    {"username": row[1], "group": "system:nodes", "filename": "kubelet.config"}
                )
                break

    for entity in entities:
        cert,key = create_certificate(entity["username"], entity["group"])
        create_x509_kubeconfig(filename=entity["filename"], user=entity["username"], path_to_cert=cert, path_to_cert_key=key)

    with open(ARGS_DIR / "kube-apiserver", "w+") as file:
        file.writelines(lines)
    return True


def FixFilePermissions():
    """Set file permissions to 600 and restrict ownership to root:root."""
    click.echo("Setting file permissions")
    try:
        dirs = [ ARGS_DIR, CREDS_DIR, CERTS_DIR, DQLITE_DIR ]
        if not isStrict():
            service = "/etc/systemd/system/snap.microk8s.daemon-kubelite.service"
            dirs.extend([service])
        for p in dirs:
            subprocess.call(f"chmod -R g-wr {p}".split())
            subprocess.call(f"chmod -R o-wr {p}".split())
            subprocess.call(f"chmod g-x {p}".split())
            subprocess.call(f"chmod o-x {p}".split())
            subprocess.call(f"chown -R root:root {p}".split())
    except subprocess.CalledProcessError as e:
        click.echo(f"Failed to set file permissions: {e}", err=True)
        exit(3)


def ensureAdmissionPlugins(plugins: str):
    """
    Ensure the provided admission plugin are set
        Parameters:
            plugins (str): csv of plugins
        Returns: True
    """
    config = ARGS_DIR / "kube-apiserver"
    with open(config, "r") as file:
        lines = file.readlines()

    found = False
    for line_number, line in enumerate(lines):
        if line.startswith("--enable-admission-plugins"):
            plugins_list = plugins.split(",")
            current = line.rstrip().split(" ")[-1]
            current = current.split("=")[-1]
            plugins_list.extend(current.split(","))
            plugins_list = list(set(plugins_list))
            plugins_str = ",".join(plugins_list)
            lines[line_number] = f"--enable-admission-plugins={plugins_str}\n"
            found = True
            break

    if not found:
        lines.append(f"--enable-admission-plugins={plugins}\n")

    with open(config, "w") as file:
        file.writelines(lines)

    return True


def addArgument(arg: str, value: str, service: str):
    """
    Add argument to a service.

        Parameters:
            arg (str): arguments
            value (str): value for the argument
            service (str): name of the service to add the argument to

        Returns:
            restart (bool): should the service be restarted
    """
    exists = False
    restart = False
    with open(ARGS_DIR / service, "r") as file:
        for line_number, line in enumerate(file, start=1):
            if arg in line:
                exists = True
                break
    if not exists:
        with open(ARGS_DIR / service, "a+") as file_object:
            file_object.write(f"{arg}={value}\n")
            restart = True
    return restart


def SetServiceArguments():
    """Set arguments to all services for CIS hardening."""
    click.echo("Setting API server arguments")
    args = [("--kubelet-certificate-authority", "${SNAP_DATA}/certs/ca.crt"),
            ("--admission-control-config-file", "${SNAP_DATA}/args/admission-control-config-file.yaml"),
            ("--audit-log-path", "/var/log/apiserver/audit.log"),
            ("--audit-log-maxage", "30"),
            ("--audit-log-maxbackup", "10"),
            ("--audit-log-maxsize", "100"),
            ("--audit-policy-file", "${SNAP_DATA}/args/audit-policy.yaml"),
            ("--request-timeout", "300s"),
            ("--tls-cipher-suites", "TLS_AES_128_GCM_SHA256,TLS_AES_256_GCM_SHA384,TLS_CHACHA20_POLY1305_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256,TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256,TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_128_GCM_SHA256,TLS_RSA_WITH_AES_256_CBC_SHA,TLS_RSA_WITH_AES_256_GCM_SHA384"),
        ]

    restart = ensureAdmissionPlugins('EventRateLimit,AlwaysPullImages,NodeRestriction')
    for arg in args:
        res = addArgument(arg[0], arg[1], "kube-apiserver")
        restart = restart or res

    click.echo("Setting controller manager arguments")
    args = [("--terminated-pod-gc-threshold", "10")]

    for arg in args:
        res = addArgument(arg[0], arg[1], "kube-controller-manager")
        restart = restart or res

    click.echo("Setting kubelet arguments")
    args = [("--protect-kernel-defaults", "true"),
            ("--event-qps", "0"),
            ("--tls-cipher-suites", "TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_GCM_SHA256"),
            ("--authorization-mode", "Webhook"),
            ("--tls-cert-file", "${SNAP_DATA}/certs/kubelet.crt"),
            ("--tls-private-key-file", "${SNAP_DATA}/certs/kubelet.key"),
        ]

    for arg in args:
        res = addArgument(arg[0], arg[1], "kubelet")
        restart = restart or res

    return restart


def Restart():
    click.echo("Restarting kubelet")
    try:
        subprocess.call("snapctl services microk8s.daemon-kubelite".split())
    except subprocess.CalledProcessError as e:
        click.echo(f"Failed to restart kubelite: {e}", err=True)
        exit(4)


def EnableRBAC():
    """Enable RBAC addon."""
    click.echo("Enabling RBAC")
    try:
        microk8s_enable = os.path.expandvars("$SNAP/microk8s-enable.wrapper")
        subprocess.call(f"{microk8s_enable} rbac".split())
    except subprocess.CalledProcessError as e:
        click.echo(f"Failed to enable RBAC: {e}", err=True)
        exit(5)


def NeedsRoot():
    """Require we run the script as root (sudo)."""
    if os.geteuid() != 0:
        click.echo("Elevated permissions are needed for this addon.", err=True)
        click.echo("Please try again, this time using 'sudo'.", err=True)
        exit(1)


def CopyExtraConfigFiles():
    """Move the extra configuration files under the args directory."""
    click.echo("Copy extra files")
    for f in [ "admission-control-config-file.yaml", "eventconfig.yaml", "audit-policy.yaml"]:
        shutil.copyfile(DIR / f, ARGS_DIR / f )


def DownloadKubebench(kubebench_version: str):
    """Download kube-bench and place the wrapper script under plugins."""
    click.echo("Downloading kube-bench")
    try:
        tmpdir = pathlib.Path(os.path.expandvars("$SNAP_DATA")) / "var" / "tmp"
        tarbin = pathlib.Path(os.path.expandvars("$SNAP")) / "bin" / "tar"
        shutil.rmtree(tmpdir, ignore_errors=True)
        if not os.path.exists(tmpdir):
            os.makedirs(tmpdir)
        arch = get_arch()
        url = f"https://github.com/aquasecurity/kube-bench/releases/download/v{kubebench_version}/kube-bench_{kubebench_version}_linux_{arch}.tar.gz"
        response = requests.get(url)
        tarball = tmpdir / "kube-bench.tar.gz"
        kubebench = DIR / "tmp"
        open(tarball, "wb").write(response.content)
        if not os.path.exists(kubebench):
            os.mkdir(kubebench)
        subprocess.check_call(f"{tarbin} -zxf {tarball}  --no-same-owner -C {kubebench}".split())
        src = DIR / "kube-bench"
        dst = PLUGINS_DIR / "kube-bench"
        shutil.copyfile(src, dst)
        subprocess.check_call(f"chmod +x {dst}".split())
    except subprocess.CalledProcessError as e:
        click.echo(f"Failed to download kube-bench: {e}", err=True)
        exit(2)


def get_arch():
    """Returns the architecture we are running on."""
    arch_translate = {"aarch64": "arm64", "x86_64": "amd64"}
    return arch_translate[platform.machine()]


def MarkAddonEnabled():
    """Mark the addon as enabled by creating a lock file."""
    lockfile = pathlib.Path(os.path.expandvars("$SNAP_DATA/var/lock/cis-hardening"))
    pathlib.Path(lockfile).touch()


def PrintExitMessage(install_kubebench):
    """Print info at the end of enabling the addon."""
    click.echo()
    click.echo("CIS hardening configuration has been applied. All microk8s commands require sudo from now on.")
    click.echo("Remember to enable this addon on nodes joining the custer.")
    if install_kubebench:
        click.echo("Inspect the CIS benchmark results with:")
        click.echo()
        click.echo("  sudo microk8s kube-bench")
    click.echo()


@click.command()
@click.option("--kubebench-version", default="0.6.13")
@click.option("--install-kubebench", default=True)
def main(kubebench_version: str, install_kubebench):
    """
    The entry point to the enable script.

        Parameters:
            kubebench_version (str): the version of kubebench we want to install
    """
    NeedsRoot()
    EnableRBAC()
    CopyExtraConfigFiles()
    if install_kubebench:
        DownloadKubebench(kubebench_version)
    FixFilePermissions()
    args_restart = SetServiceArguments()
    token_restart = FixTokens()
    if args_restart or token_restart:
        Restart()
    MarkAddonEnabled()
    PrintExitMessage(install_kubebench)


if __name__ == '__main__':
    main()
