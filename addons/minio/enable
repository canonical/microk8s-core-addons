#!/bin/bash -e

. "${SNAP}/actions/common/utils.sh"

DIR="$(cd $(dirname "${BASH_SOURCE[0]}") && pwd)"
ARCH="$(arch)"

CREATE_TENANT="yes"
STORAGE_CLASS="microk8s-hostpath"
CAPACITY="20Gi"
SERVERS=1
VOLUMES=1
TENANT="microk8s"
VERSION="v6.0.2"
TLS="no"
PROMETHEUS="no"
REPO="https://operator.min.io"

# Enable dependenciess
MICROK8S_ENABLE="${SNAP}/microk8s-enable.wrapper"
"${MICROK8S_ENABLE}" dns
"${MICROK8S_ENABLE}" helm3
"${MICROK8S_ENABLE}" hostpath-storage

function usage {
  echo "Usage: microk8s enable minio [OPTIONS]"
  echo ""
  echo "Enable the MinIO addon."
  echo ""
  echo "   -h               Print this help message"
  echo "   -k               Do not create default tenant"
  echo "   -s STORAGECLASS  Storage class to use for the default tenant (default: ${STORAGE_CLASS})"
  echo "   -c CAPACITY      Capacity of each volume for the default tenant (default: ${CAPACITY})"
  echo "   -n SERVERS       Number of servers of the default tenant (default: ${SERVERS})"
  echo "   -v VOLUMES       Number of volumes for each server of the default tenant (default: ${VOLUMES})"
  echo "   -t TENANTNAME    Name of the default tenant (default: ${TENANT})"
  echo "   -T               Enable TLS for the default tenant (default: disabled)"
  echo "   -p               Enable Prometheus for the default tenant (default: disabled)"
  echo "   -r REPOSITORY    Minio Operator Helm chart repository (default: ${REPO})"
  echo "   -V VERSION       Minio Operator version (default: ${VERSION})"
}

while getopts ":hkTps:c:n:v:t:r:V:" arg; do
  case "${arg}" in
    k) CREATE_TENANT="no" ;;
    s) STORAGE_CLASS="${OPTARG}" ;;
    c) CAPACITY="${OPTARG}" ;;
    n) SERVERS="${OPTARG}" ;;
    v) VOLUMES="${OPTARG}" ;;
    t) TENANT="${OPTARG}" ;;
    T) TLS="yes" ;;
    p) PROMETHEUS="yes" ;;
    V) VERSION="${OPTARG}" ;;
    r) REPO="${OPTARG}" ;;
    h)
      usage
      exit 0
      ;;
    :)
      echo "Missing argument for option -${OPTARG}"
      usage
      exit 1
      ;;
    ?)
      echo "Invalid option -${OPTARG}"
      usage
      exit 1
      ;;
  esac
done

HELM="$SNAP/microk8s-helm3.wrapper"

echo "Installing minio operator"
$HELM upgrade --install minio-operator operator \
  --repo $REPO --version "${VERSION}" \
  --create-namespace --namespace "minio-operator"

if [ "x${CREATE_TENANT}" = "xyes" ]; then
  echo "Create default tenant with:"
  echo ""
  echo "  Name: ${TENANT}"
  echo "  Capacity: ${CAPACITY}"
  echo "  Servers: ${SERVERS}"
  echo "  Volumes: ${VOLUMES}"
  echo "  Storage class: ${STORAGE_CLASS}"
  echo "  TLS: ${TLS}"
  echo "  Prometheus: ${PROMETHEUS}"
  echo ""

  # Previously, kubectl-minio created an additional user. We will create here as well.
  # This is done by creating a secret containing CONSOLE_ACCESS_KEY and CONSOLE_SECRET_KEY
  # and referencing it in the helm chart below.
  KUBECTL="$SNAP/microk8s-kubectl.wrapper"
  SECRET_NAME="${TENANT}-user-1"
  $KUBECTL create -n minio-operator secret generic "${SECRET_NAME}" \
    --from-literal=CONSOLE_ACCESS_KEY="$(tr -dc A-Za-z0-9 </dev/urandom | head -c 20)" \
    --from-literal=CONSOLE_SECRET_KEY="$(tr -dc A-Za-z0-9 </dev/urandom | head -c 40)"

  HELM_OPTS=

  if [ "x${TLS}" = "xno" ]; then
    HELM_OPTS+="--set tenant.certificate.requestAutoCert=false "
  fi

  if [ "x${PROMETHEUS}" != "xno" ]; then
    HELM_OPTS+="--set tenant.prometheusOperator=true "
  fi

  set -x
  $HELM upgrade --install "${TENANT}" tenant \
    --repo $REPO --version "${VERSION}" \
    --namespace "minio-operator" \
    --set "tenant.name=${TENANT}" \
    --set "tenant.users[0].name=${SECRET_NAME}" \
    --set "tenant.pools[0].name=${TENANT}" \
    --set "tenant.pools[0].storageClassName=${STORAGE_CLASS}" \
    --set "tenant.pools[0].size=${CAPACITY}" \
    --set "tenant.pools[0].servers=${SERVERS}" \
    --set "tenant.pools[0].volumesPerServer=${VOLUMES}" \
    ${HELM_OPTS}
  set +x
fi


echo "================================"
echo "Enabled minio addon."
echo ""
echo "You can interact with minio through the minio client (https://min.io/docs/minio/linux/reference/minio-mc.html#minio-client)."
echo ""
