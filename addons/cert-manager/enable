#!/bin/bash -e

. "${SNAP}/actions/common/utils.sh"

DIR=`realpath $(dirname $0)`
ENABLE="$SNAP/microk8s-enable.wrapper"
KUBECTL="$SNAP/microk8s-kubectl.wrapper"

REPO="https://charts.jetstack.io"
VERSION="v1.17.1"

function usage {
  echo "Usage: microk8s enable cert-manager [OPTIONS]"
  echo ""
  echo "Enable the cert-manager addon."
  echo ""
  echo "   -h             Print this help message"
  echo "   -r REPOSITORY  cert-manager Helm chart repository (default: ${REPO})"
  echo "   -V VERSION     cert-manager Helm chart version (default: ${VERSION})"
}

while getopts ":hr:V:" arg; do
  case "${arg}" in
    V) VERSION="${OPTARG}" ;;
    r) REPO="${OPTARG}" ;;
    h)
      usage
      exit 0
      ;;
    :)
      echo "Missing argument for option -${OPTARG}"
      usage
      exit 1
      ;;
    ?)
      echo "Invalid option -${OPTARG}"
      usage
      exit 1
      ;;
  esac
done

echo "Enable DNS addon"
$ENABLE dns

echo "Enable helm"
$ENABLE helm3

HELM="$SNAP/microk8s-helm3.wrapper"

echo "Enabling cert-manager"
$HELM upgrade --install cert-manager cert-manager \
  --repo "${REPO}" --version "${VERSION}" \
  --set crds.enabled=true \
  --create-namespace --namespace "cert-manager"

echo "Waiting for cert-manager to be ready."
while ! $KUBECTL apply -f $DIR/cert-tester.yaml > /dev/null 2>&1
do
    echo -n "."
    sleep 5
done
echo "ready"
$KUBECTL delete -f ${DIR}/cert-tester.yaml > /dev/null 2>&1 || true

echo "Enabled cert-manager"

echo "
===========================

Cert-manager is installed. As a next step, try creating an Issuer
for Let's Encrypt by creating the following resource:

$ microk8s kubectl apply -f - <<EOF
---
apiVersion: cert-manager.io/v1
kind: Issuer
metadata:
  name: letsencrypt
spec:
  acme:
    # You must replace this email address with your own.
    # Let's Encrypt will use this to contact you about expiring
    # certificates, and issues related to your account.
    email: me@example.com
    server: https://acme-v02.api.letsencrypt.org/directory
    privateKeySecretRef:
      # Secret resource that will be used to store the account's private key.
      name: letsencrypt-account-key
    # Add a single challenge solver, HTTP01 using nginx
    solvers:
    - http01:
        ingress:
          ingressClassName: nginx
EOF

Then, you can create an ingress to expose 'my-service:80' on 'https://my-service.example.com' with:

$ microk8s enable ingress
$ microk8s kubectl create ingress my-ingress \\
    --annotation cert-manager.io/issuer=letsencrypt \\
    --rule 'my-service.example.com/*=my-service:80,tls=my-service-tls'
"
