#!/usr/bin/env bash
set -e

source $SNAP/actions/common/utils.sh
CURRENT_DIR=$(cd $(dirname "${BASH_SOURCE[0]}") && pwd)

"$SNAP/microk8s-enable.wrapper" core/dns
"$SNAP/microk8s-enable.wrapper" core/helm3
"$SNAP/microk8s-enable.wrapper" core/hostpath-storage

NAMESPACE_PTR="observability"
KUBECTL="$SNAP/microk8s-kubectl.wrapper"

echo "Enabling observability"

# make sure the "monitoring" namespace exists
$KUBECTL create namespace "$NAMESPACE_PTR" > /dev/null 2>&1 || true
# load the CRD and wait for it to be installed
VALUES="$@"

for i in "$@"
do
case $i in
    -f=*|--values=*)
    VALUES="${i#*=}"
    shift # past argument=value
    ;;
    *)
          # unknown option
    ;;
esac
done

# get addresses of all nodes to configure kubeControllerManager and kubeScheduler endpoints
NODE_ENDPOINTS=$($KUBECTL get nodes -o jsonpath={.items[*].status.addresses[?\(@.type==\"InternalIP\"\)].address} | sed 's/\s\+/,/g')

SCRIPT_DIR=$(cd $(dirname "${BASH_SOURCE[0]}") && pwd)
HELM="${SNAP}/microk8s-helm3.wrapper"
$HELM repo add prometheus-community https://prometheus-community.github.io/helm-charts
$HELM repo add grafana https://grafana.github.io/helm-charts
$HELM repo update
if [ -z "$VALUES" ]
then
  $HELM upgrade --install kube-prom-stack -f ${SCRIPT_DIR}/grafana.yaml \
    --set kubeControllerManager.endpoints={$NODE_ENDPOINTS} \
    --set kubeProxy.endpoints={$NODE_ENDPOINTS} \
    --set kubeScheduler.endpoints={$NODE_ENDPOINTS} \
    prometheus-community/kube-prometheus-stack -n $NAMESPACE_PTR
else
  $HELM upgrade --install kube-prom-stack -f ${SCRIPT_DIR}/grafana.yaml -f "$2" \
    --set kubeControllerManager.endpoints={$NODE_ENDPOINTS} \
    --set kubeProxy.endpoints={$NODE_ENDPOINTS} \
    --set kubeScheduler.endpoints={$NODE_ENDPOINTS} \
    prometheus-community/kube-prometheus-stack -n $NAMESPACE_PTR
fi

$HELM upgrade --install loki grafana/loki-stack -n $NAMESPACE_PTR --set="grafana.sidecar.datasources.enabled=false"
$HELM upgrade --install tempo grafana/tempo -n $NAMESPACE_PTR

refresh_opt_in_config "authentication-kubeconfig" "\${SNAP_DATA}/credentials/scheduler.config" kube-scheduler
refresh_opt_in_config "authorization-kubeconfig" "\${SNAP_DATA}/credentials/scheduler.config" kube-scheduler
restart_service scheduler
refresh_opt_in_config "authentication-kubeconfig" "\${SNAP_DATA}/credentials/controller.config" kube-controller-manager
refresh_opt_in_config "authorization-kubeconfig" "\${SNAP_DATA}/credentials/controller.config" kube-controller-manager
restart_service controller-manager
refresh_opt_in_config "metrics-bind-address" "0.0.0.0:10249" kube-proxy
restart_service proxy

echo ""
echo "Note: the observability stack is setup to monitor only the current nodes of the MicroK8s cluster."
echo "For any nodes joining the cluster at a later stage this addon will need to be set up again."
echo ""
echo "Observability has been enabled (user/pass: admin/prom-operator)"
