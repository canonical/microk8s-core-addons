#!/usr/bin/env python3

import json
import os
import pathlib
import shutil
import subprocess
import sys

import click

DIR = pathlib.Path(__file__).parent.absolute()
KUBECTL = os.path.expandvars("$SNAP/microk8s-kubectl.wrapper")
HELM = os.path.expandvars("$SNAP/microk8s-helm3.wrapper")
MAYASTOR_DATA = pathlib.Path(os.path.expandvars("$SNAP_COMMON/mayastor/data"))


@click.command()
@click.option("--remove-storage/--preserve-storage", is_flag=True, default=True)
@click.option("--force/--no-force", is_flag=True, default=True)
def main(remove_storage: bool, force: bool):
    pools = subprocess.check_output(
        [KUBECTL, "get", "msp", "-n", "mayastor", "-o", "json"],
    )

    try:
        j = json.loads(pools)
    except json.JSONDecodeError as e:
        click.echo("Failed to parse existing pools: {}".format(e), err=True)
        sys.exit(1)

    used = [p for p in j.get("items", []) if p.get("status", {}).get("used", 0) > 0]
    if not force and used:
        click.echo("The following pools are in use, please run with --force", err=True)
        for p in used:
            click.echo("{} ({})".format(p["metadata"]["name"], p["status"]), err=True)
        sys.exit(1)

    if remove_storage:
        for pool in j.get("items"):
            pool_name = pool["metadata"]["name"]
            subprocess.run([DIR / "pools.py", "remove", pool_name, "--force", "--purge"])

    subprocess.run([HELM, "uninstall", "mayastor", "-n", "mayastor"])


if __name__ == "__main__":
    main()
