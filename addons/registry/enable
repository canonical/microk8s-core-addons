#!/usr/bin/env python3

import click
import os
import subprocess
import yaml
import shlex
import re

REGEX_DISK_SIZE='(^[2-9][0-9]{1,}|^[1-9][0-9]{2,})(Gi$)'


@click.command()
@click.option('--size', default="20Gi", help="Size of the registry")
@click.option('--storageclass', default=None, help="Storage class to be used")
def enable_registry(size, storageclass):
    snap_path = os.environ.get("SNAP")
    current_path = os.path.dirname(os.path.realpath(__file__))
    # print(current_path, '======')
    manifest = "{}/registry.yaml".format(current_path)

    #Enable hostpath-storage first. If already enabled, nothing changes.
    subprocess.call(["{}/microk8s-enable.wrapper".format(snap_path), "hostpath-storage"])

    command = shlex.split('{}/microk8s-kubectl.wrapper get sc --no-headers -o custom-columns=":metadata.name"'.format(snap_path))
    sclasses = subprocess.check_output(command)
    sclasses = sclasses.decode("utf-8") 
    sclasses = sclasses.split('\n')
    sclasses = [sc.strip() for sc in sclasses if sc.strip()]

    if (storageclass is not None) & (storageclass not in sclasses):
        print('Error: Storage class {} doesn\'t exit.'.format(storageclass))
        return
    
    if not bool(re.match(REGEX_DISK_SIZE, size)):
        print("The size of the registry should be higher or equal to 20Gi and match the regex: {}".format(REGEX_DISK_SIZE))
        return

    with open(manifest, "r", encoding="utf8") as f:
        docs = list(yaml.safe_load_all(f))
        docs[1].get('spec').get('resources').get('requests')['storage'] = size
        if storageclass is not None:
            docs[1].get('spec')['storageClassName'] = storageclass

    manifest_to_apply = "{}/registry_tmp.yaml".format(current_path)

    with open(manifest_to_apply, "w") as f:
        yaml.safe_dump_all(docs, f)
    # manifest_to_apply = yaml.safe_dump_all(docs)

    subprocess.call(["{}/microk8s-kubectl.wrapper".format(snap_path), "apply", "-f", manifest_to_apply])

    os.remove(manifest_to_apply)

enable_registry()